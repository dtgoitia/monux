const path = require('path')
const webpack = require('webpack')
const ProgressPlugin = require('webpack/lib/ProgressPlugin')
const HtmlWebpackPlugin = require('html-webpack-plugin')
const ExtractTextPlugin = require('extract-text-webpack-plugin')
// const autoprefixer = require('autoprefixer')
// const postcssUrl = require('postcss-url')

const { AotPlugin } = require('@ngtools/webpack')
const {
  NoEmitOnErrorsPlugin,
  LoaderOptionsPlugin,
  DefinePlugin,
  HashedModuleIdsPlugin
} = require('webpack')
const {
  GlobCopyWebpackPlugin,
  BaseHrefWebpackPlugin
} = require('@angular/cli/plugins/webpack')

const { CommonsChunkPlugin, UglifyJsPlugin } = webpack.optimize

const nodeModules = path.join(process.cwd(), 'node_modules')
const entryPoints = [
  'inline',
  'polyfills',
  'sw-register',
  'styles',
  // 'vendor',
  'main'
]
const baseHref = ''
const deployUrl = ''

const isProd = process.env.NODE_ENV === 'production'

const commonPlugins = [
  // Always expose NODE_ENV to webpack, you can now use `process.env.NODE_ENV`
  // inside your code for any environment checks; UglifyJS will automatically
  // drop any unreachable code.
  new DefinePlugin({
    'process.env.NODE_ENV': '"production"'
  }),

  // new NoEmitOnErrorsPlugin(),

  new GlobCopyWebpackPlugin({
    patterns: ['assets', 'favicon.ico'],
    globOptions: {
      cwd: process.cwd() + '/src',
      dot: true,
      ignore: '**/.gitkeep'
    }
  }),

  new ProgressPlugin(),

  new HtmlWebpackPlugin({
    template: './src/app/index.html',
    filename: './index.html',
    hash: false,
    inject: true,
    compile: true,
    favicon: false,
    minify: false,
    cache: true,
    showErrors: true,
    chunks: 'all',
    excludeChunks: [],
    title: 'Webpack App',
    xhtml: true,
    chunksSortMode: function sort (left, right) {
      let leftIndex = entryPoints.indexOf(left.names[0])
      let rightindex = entryPoints.indexOf(right.names[0])
      if (leftIndex > rightindex) {
        return 1
      } else if (leftIndex < rightindex) {
        return -1
      } else {
        return 0
      }
    }
  }),

  new BaseHrefWebpackPlugin({}),

  new CommonsChunkPlugin({
    name: 'inline',
    minChunks: null
  }),

  // new CommonsChunkPlugin({
  //   name: 'vendor',
  //   minChunks: module =>
  //     module.resource && module.resource.startsWith(nodeModules),
  //   chunks: ['main']
  // }),

  new ExtractTextPlugin({
    filename: '[name].bundle.css'
  }),

  new LoaderOptionsPlugin({
    sourceMap: false,
    options: {
      postcss: [
        autoprefixer()
        // postcssUrl({
        //   url: obj => {
        //     // Only convert root relative URLs, which CSS-Loader won't process into require().
        //     if (!obj.url.startsWith('/') || obj.url.startsWith('//')) {
        //       return obj.url
        //     }
        //     if (deployUrl.match(/:\/\//)) {
        //       // If deployUrl contains a scheme, ignore baseHref use deployUrl as is.
        //       return `${deployUrl.replace(/\/$/, '')}${obj.url}`
        //     } else if (baseHref.match(/:\/\//)) {
        //       // If baseHref contains a scheme, include it as is.
        //       return (
        //         baseHref.replace(/\/$/, '') +
        //         `/${deployUrl}/${obj.url}`.replace(/\/\/+/g, '/')
        //       )
        //     } else {
        //       // Join together base-href, deploy-url and the original URL.
        //       // Also dedupe multiple slashes into single ones.
        //       return `/${baseHref}/${deployUrl}/${obj.url}`.replace(
        //         /\/\/+/g,
        //         '/'
        //       )
        //     }
        //   }
        // })
      ],
      context: ''
    }
  })
]

const devPlugins = [
  ...commonPlugins,

  new AotPlugin({
    mainPath: './src/app/main.ts',
    // hostReplacementPaths: {
    //   'environments/index.ts': 'environments/index.ts'
    // },
    // exclude: [],
    tsConfigPath: './tsconfig.json',
    typeChecking: false,
    skipCodeGeneration: true
  })
]

const prodPlugins = [
  ...commonPlugins,

  new AotPlugin({
    mainPath: './src/app/main.ts',
    // hostReplacementPaths: {
    //   'environments/index.ts': 'environments/index.ts'
    // },
    // exclude: [],
    tsConfigPath: './tsconfig.json'
  }),

  new HashedModuleIdsPlugin({
    hashFunction: 'md5',
    hashDigest: 'base64',
    hashDigestLength: 4
  }),

  new UglifyJsPlugin({
    mangle: {
      screw_ie8: true
    },
    compress: {
      screw_ie8: true,
      warnings: false
    },
    sourceMap: false
  })
]

module.exports = {
  entry: {
    main: ['./src/app/main.ts'],
    polyfills: ['./src/app/polyfills.ts'],
    styles: ['./src/app/index.css']
  },
  output: {
    path: path.join(process.cwd(), 'dist', 'app'),
    filename: '[name].bundle.js',
    chunkFilename: '[id].chunk.js'
  },
  devtool: 'inline-source-map',
  resolve: {
    extensions: ['.ts', '.js', '.json'],
    aliasFields: [],
    alias: {
      // WORKAROUND See. angular-cli/issues/5433
      environments: isProd
        ? path.resolve(__dirname, 'src/environments/index.prod.ts')
        : path.resolve(__dirname, 'src/environments/index.ts')
    },
    modules: ['./node_modules']
  },
  resolveLoader: {
    modules: ['./node_modules']
  },
  plugins: isProd ? prodPlugins : devPlugins,
  module: {
    rules: [
      {
        enforce: 'pre',
        test: /\.(js|ts)$/,
        loader: 'source-map-loader',
        exclude: [
          /\/node_modules\//,
          path.join(__dirname, 'node_modules', '@angular/compiler')
        ]
      },
      {
        test: /\.html$/,
        loader: 'html-loader'
      },
      {
        test: /\.(eot|svg)$/,
        loader: 'file-loader?name=[name].[hash:20].[ext]'
      },
      {
        test: /\.(jpg|png|gif|otf|ttf|woff|woff2|cur|ani)$/,
        loader: 'url-loader?name=[name].[hash:20].[ext]&limit=10000'
      },
      {
        // include: [path.join(process.cwd(), 'src/app/index.css')],
        test: /\.css$/,
        loaders: ['style-loader', 'css-loader']
      },
      {
        test: /\.ts$/,
        loader: '@ngtools/webpack'
      }
    ]
  },
  externals: {
    electron: 'require(\'electron\')',
    child_process: 'require(\'child_process\')',
    crypto: 'require(\'crypto\')',
    events: 'require(\'events\')',
    fs: 'require(\'fs\')',
    http: 'require(\'http\')',
    https: 'require(\'https\')',
    assert: 'require(\'assert\')',
    dns: 'require(\'dns\')',
    net: 'require(\'net\')',
    os: 'require(\'os\')',
    path: 'require(\'path\')',
    querystring: 'require(\'querystring\')',
    readline: 'require(\'readline\')',
    repl: 'require(\'repl\')',
    stream: 'require(\'stream\')',
    string_decoder: 'require(\'string_decoder\')',
    url: 'require(\'url\')',
    util: 'require(\'util\')',
    zlib: 'require(\'zlib\')'
  },
  node: {
    fs: 'empty',
    global: true,
    crypto: 'empty',
    tls: 'empty',
    net: 'empty',
    process: true,
    module: false,
    clearImmediate: false,
    setImmediate: false,
    __dirname: false,
    __filename: false
  }
}
